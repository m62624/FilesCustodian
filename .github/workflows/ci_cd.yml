name: CI/CD Pipeline

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
    branches:
      - "*"

env:
  IMAGE_DOCKER: ghcr.io/${{ secrets.NAME_LOGIN }}/filescustodian
  DOCKER_BUILDKIT: 1

jobs:
  # job для сборки образа (в нем будет происходит сборка и тестирование библиотеки)
  build-image:
    runs-on: ubuntu-latest
    steps:
      # Шаг для входа в Docker Registry
      - name: Log in to `GitHub Docker Registry`
        run: echo ${{ secrets.PAT_GITHUB }} | docker login ghcr.io -u ${{ secrets.NAME_LOGIN }} --password-stdin
      # Шаг для клонирования репозитория
      - name: Checkout code
        uses: actions/checkout@v3
      # Шаг для сборки и пуша образа (используем кэш прошлой сборки)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_DOCKER }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_DOCKER }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_DOCKER }}:buildcache,mode=max

  # Job для проверки кода линтером
  linter-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг для установки Python и инструментов линтинга (black, flake8, и т.д.)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      # Шаг для запуска линтеров
      - name: Run linters
        run: |
          black --check FilesCustodianGUI

  test-py:
    needs: [linter-check]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to `GitHub Docker Registry`
        run: echo ${{ secrets.PAT_GITHUB }} | docker login ghcr.io -u ${{ secrets.NAME_LOGIN }} --password-stdin
      - name: Build packages 
        run: |
          docker run ${{ env.IMAGE_DOCKER }}:latest sh -c "pytest tests/*"

  package-build:
    needs: [build-image,test-py]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to `GitHub Docker Registry`
        run: echo ${{ secrets.PAT_GITHUB }} | docker login ghcr.io -u ${{ secrets.NAME_LOGIN }} --password-stdin
      - name: Build packages 
        run: |
          docker run ${{ env.IMAGE_DOCKER }}:latest sh -c "python FilesCustodianGUI/setup.py build; ls build; cd build/; pwd"
          docker cp $(docker ps -lq):/main_project/build/exe.linux-*/main_window .;
      - name: Save package to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-app-${{ github.run_id }}
          path: build
          